MANIPULATING COLUMNS:
*adding columns:
df['column_name'] = content
 df['Sales Tax'] = df.Price * 0.075

*complex column operation
    #The apply function is used to apply a block of ocode or operation to a particular column
        df['new_column] = df.column 1.apply('some-code')

        1. df['reading_music] = df.Reading Playlist.apply(str.lower)

    #another way this can be done is the use of lamnda functions. below is the syntax for lambda function
        lambda x: [OUTCOME IF TRUE] if [CONDITIONAL] else [OUTCOME IF FALSE]

        1. In Pandas, we often use lambda functions to perform complex operations on columns. For example, suppose that we want to create a column containing the email provider for each email address in the following table:

                        Name	Email
                        JOHN SMITH	john.smith@gmail.com
                        Jane Doe	jdoe@yahoo.com
                        joe schmo	joeschmo@hotmail.com
                        We could use the following code with a lambda function and the string method .split():

                        df['Email Provider'] = df.Email.apply(lambda x: x.split('@')[-1])

        2. WORK
                        orders = pd.read_csv('shoefly.csv')
                        print(orders.head(5))

                        shoe_source = lambda x: "animal" if x == "leather" else "vegan"

                        orders['shoe_source'] = orders.shoe_material.apply(shoe_source)
                        # print(orders)

                        lambda2 = lambda row: 'Dear Mr. ' + row.last_name if row.gender == "male" else 'Dear Mrs. ' + row.last_name 

                        orders['salutation'] = orders.apply(lambda2,axis=1)
                        print(orders)




RENAMING COLUMNS:

> df.columns = ["column name", "column2". "nth.column"] 

#using rename method by passing a dictionary as the .columns argument
#not forgeting the , inplace=True
df.rename(columns={
    "og.column": 'new_column',
    "og_column2": 'new_column2',
    "nth_og_column": "nth_new_column',
},inpace=True)



AGGREGATES
*GROUPBY
    In general, we use the following syntax to calculate aggregates:

    #df.groupby('column1').column2.measurement()
    #where:

    #column1 is the column that we want to group by ('student' in our example)
    #column2 is the column that we want to perform a measurement on (grade in our example)
    #measurement is the measurement function we want to apply (mean in our example)



Sometimes, the operation that you want to perform is more complicated than mean or count. In those cases, you can use the apply method and lambda functions, just like we did for individual column operations. Note that the input to our lambda function will always be a list of values.

A great example of this is calculating percentiles. Suppose we have a DataFrame of employee information called df that has the following columns:

id: the employee’s id number
name: the employee’s name
wage: the employee’s hourly wage
category: the type of work that the employee does
Our data might look something like this:

id	name	wage	category
10131	Sarah Carney	39	product
14189	Heather Carey	17	design
15004	Gary Mercado	33	marketing
11204	Cora Copaz	27	design
…			
If we want to calculate the 75th percentile (i.e., the point at which 75% of employees have a lower wage and 25% have a higher wage) for each category, we can use the following combination of apply and a lambda function:

# np.percentile can calculate any percentile over an array of values
high_earners = df.groupby('category').wage
    .apply(lambda x: np.percentile(x, 75))
    .reset_index()

The output, high_earners might look like this:

category	wage
0	design	23
1	marketing	35
2	product	48
…		
Instructions
Checkpoint 1 Passed
1.
Once more, we’ll return to the data from ShoeFly.com. Our Marketing team says that it’s important to have some affordably priced shoes available for every color of shoe that we sell.

Let’s calculate the 25th percentile for shoe price for each shoe_color to help Marketing decide if we have enough cheap shoes on sale. Save the data to the variable cheap_shoes.

Note: Be sure to use reset_index() at the end of your query so that cheap_shoes is a DataFrame.

Checkpoint 2 Passed
2.
Display cheap_shoes using print.

Concept Review
Want to quickly review some of the concepts you’ve been learning? Take a look at this material's cheatsheet!
Community Forums
Still have questions? View this exercise's thread in the Codecademy Forums.
Code Editor
file navigation

script.py

Fullscreen Code Editor
123456789
import codecademylib3
import numpy as np
import pandas as pd

orders = pd.read_csv('orders.csv')
print(orders.head(5))

cheap_shoes = orders.groupby('shoe_color').price.apply(lambda x: np.percentile(x, 25)).reset_index()
print(cheap_shoes)
ctrl + enter
Run


Web Browser
to previous page

browser page

https://localhost:8000/?allowEmbedForCodecademy=false&allowCopyAndPasteForCodecademy=true&allowFileUploadForCodecademy=true&allowFileDownloadForCodecademy=true&allowExternalLinkForCodecademy=true&allowAICodeExplainForCodecademy=true&allowAIChatAssistantForCodecademy=true&allowAIErrorExplainForCodecademy=true
Fullscreen Web Browser




TO REARRANGE table
df.pivot(columns='ColumnToPivot',
         index='ColumnToBeRows',
         values='ColumnToBeValues')
